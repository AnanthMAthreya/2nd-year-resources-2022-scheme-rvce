import math
import random

# Load data from CSV
def load_csv_data(filename):
    X = []
    y = []
    with open(filename, "r") as f:
        lines = f.readlines()
        for line in lines[1:]:  # skip header
            age, income, label = line.strip().split(",")
            X.append([float(age), float(income)])
            y.append(int(label))
    return X, y

# Normalize features
def normalize(data):
    cols = len(data[0])
    mins = [min(col) for col in zip(*data)]
    maxs = [max(col) for col in zip(*data)]
    return [[(val - mins[i]) / (maxs[i] - mins[i]) for i, val in enumerate(row)] for row in data]

# Sigmoid and dot product
def sigmoid(z):
    return 1 / (1 + math.exp(-z))

def dot(x, w):
    return sum(xi * wi for xi, wi in zip(x, w))

# Logistic Regression model
class LogisticRegression:
    def __init__(self, input_dim, lr=0.1):
        self.weights = [0.0 for _ in range(input_dim)]
        self.bias = 0.0
        self.lr = lr

    def predict_prob(self, x):
        return sigmoid(dot(x, self.weights) + self.bias)

    def predict(self, x):
        return 1 if self.predict_prob(x) >= 0.5 else 0

    def train(self, X, y, epochs=1000):
        for epoch in range(epochs):
            total_loss = 0
            for i in range(len(X)):
                x_i = X[i]
                y_i = y[i]
                z = dot(x_i, self.weights) + self.bias
                y_hat = sigmoid(z)
                loss = - (y_i * math.log(y_hat) + (1 - y_i) * math.log(1 - y_hat))
                total_loss += loss

                dz = y_hat - y_i
                for j in range(len(self.weights)):
                    self.weights[j] -= self.lr * dz * x_i[j]
                self.bias -= self.lr * dz

            if epoch % 100 == 0:
                print(f"Epoch {epoch}: Loss = {total_loss / len(X)}")

# Split data into train and test sets (70/30)
def split_data(X, y, train_ratio=0.7):
    data = list(zip(X, y))
    random.shuffle(data)
    train_size = int(len(data) * train_ratio)
    train_data = data[:train_size]
    test_data = data[train_size:]
    X_train, y_train = zip(*train_data)
    X_test, y_test = zip(*test_data)
    return list(X_train), list(y_train), list(X_test), list(y_test)

# Main program
X_raw, y = load_csv_data("data.csv")
X_normalized = normalize(X_raw)
X_train, y_train, X_test, y_test = split_data(X_normalized, y)

model = LogisticRegression(input_dim=2, lr=0.5)
model.train(X_train, y_train, epochs=1000)

# Evaluate on test data
print("\n--- TEST SET PREDICTIONS ---")
correct = 0
for i, x in enumerate(X_test):
    pred = model.predict(x)
    actual = y_test[i]
    print(f"Sample {i+1}: Predicted = {pred}, Actual = {actual}")
    if pred == actual:
        correct += 1

accuracy = correct / len(X_test)
print(f"\nAccuracy on test set: {accuracy * 100:.2f}%")
